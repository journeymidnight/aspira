/*
 * Copyright (C) 2017 Dgraph Labs, Inc. and Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


// Style guide for Protocol Buffer 3.
// Use CamelCase (with an initial capital) for message names – for example,
// SongServerRequest. Use underscore_separated_names for field names – for
// example, song_name.

syntax = "proto3";



package aspirapb;


/* option (gogoproto.marshaler_all) = true; */
/* option (gogoproto.sizer_all) = true; */
/* option (gogoproto.unmarshaler_all) = true; */
/* option (gogoproto.goproto_getters_all) = true; */

// Worker services.
message Payload {
	bytes Data = 1;
}

message RaftContext {
	fixed64 id = 1;
	string addr = 2;
}



message Snapshot {
	RaftContext context = 1;
	uint64 index = 2;
	uint64 read_ts = 3;
	// done is used to indicate that snapshot stream was a success.
	bool done	= 4;
	// since_ts stores the ts of the last snapshot to support diff snap updates.
	uint64 since_ts = 5;
}


message RaftBatch {
	RaftContext context = 1;
	Payload payload = 2;
}


message EntryMeta {
        uint64     Term  = 1;
        uint64     Index = 2;
		enum Type {
			Put = 0;
			LeaderCommit = 1;
			ConfChange = 2;
		}
		Type EntryType = 3;
		bytes      Data = 4;
}

service Raft {
	rpc Heartbeat (Payload)        returns (stream Payload) {}
	rpc RaftMessage (stream RaftBatch) returns (Payload) {}
	rpc JoinCluster (RaftContext)      returns (Payload) {}
}





// vim: noexpandtab sw=2 ts=2
